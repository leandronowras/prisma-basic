// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js" //eh oq converte prisma em sql
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String
  age            Int
  email          String           @unique
  // isAdmin         Boolean
  role           Role             @default(BASIC)
  // preferences   Json // transformei em tabela
  writtenPosts   Post[]           @relation("WrittenPosts") // [] = modificador
  favoritePosts  Post[]           @relation("FavoritePosts") // "" so deve ser feito se tiver 2 referencias para a mesma tabela
  userPreference UserPreferences?

  @@unique([age, name]) //block level attribute(constrains) (nao pode ter 1 mesmo usario com o mesmo nome e mesma idade AO MESMO TEMPO)
  @@index([email]) //index para performance
}

model UserPreferences {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique // unique pois 1 preferencia so referencia a 1 user
  // isso impede q um user seja deletado sem antes deletar suas preferencias
}

model Post {
  id            String     @id @default(uuid())
  title         String
  averageRating Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt // seta automaticamente o timestamp atual toda vez q sofre alteracoes
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id]) // relacoes do tipo 1-n, n-n, n-1
  //field se refere a que campo dentro do post esta referenciando id no User ( tipo uma chave estrangeria )
  authorId      String
  favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedById], references: [id])
  favoritedById String?
  categories    Category[]

  // @@id([title, authorId]) // id composto ( tem 2 coisas )
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  // serve para o caso de ter opcoes limitadas para um campo
  BASIC
  ADMIN
}
